
DC_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000134  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007c3  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006bf  00000000  00000000  00000a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000422  00000000  00000000  000010ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001510  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000399  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000105  00000000  00000000  0000193d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001a42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 81 00 	call	0x102	; 0x102 <main>
  74:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_Init>:
#include <util/delay.h> 


void ADC_Init()			/* ADC Initialization function */ 
{ 
	DDRA = 0x00;		/* Make ADC port as input */ 
  7c:	1a ba       	out	0x1a, r1	; 26
	ADCSRA = 0x87;		/* Enable ADC, with freq/128 */ 
  7e:	87 e8       	ldi	r24, 0x87	; 135
  80:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;		/* Vref: Avcc, ADC channel: 0 */ 
  82:	80 e4       	ldi	r24, 0x40	; 64
  84:	87 b9       	out	0x07, r24	; 7
  86:	08 95       	ret

00000088 <ADC_Read>:
} 
	
	
int ADC_Read(char channel) /* ADC Read function */ 
{ 
	ADMUX = 0x40 | (channel & 0x07);	/* set input channel to read */ 
  88:	87 70       	andi	r24, 0x07	; 7
  8a:	80 64       	ori	r24, 0x40	; 64
  8c:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);				/* Start ADC conversion */ 
  8e:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA & (1<<ADIF)));		/* Wait until end of conversion */ 
  90:	34 9b       	sbis	0x06, 4	; 6
  92:	fe cf       	rjmp	.-4      	; 0x90 <ADC_Read+0x8>
	ADCSRA |= (1<<ADIF);				/* Clear interrupt flag */ 
  94:	34 9a       	sbi	0x06, 4	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	8f ec       	ldi	r24, 0xCF	; 207
  98:	97 e0       	ldi	r25, 0x07	; 7
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <ADC_Read+0x12>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <ADC_Read+0x18>
  a0:	00 00       	nop
	_delay_ms(1);						/* Wait a little bit */ 
	return ADCW;						/* Return ADC word */ 
  a2:	84 b1       	in	r24, 0x04	; 4
  a4:	95 b1       	in	r25, 0x05	; 5
	
}
  a6:	08 95       	ret

000000a8 <setup>:
#include "DC_Motor.h" 
volatile uint8_t Direction = 0;

/* Function that does the pin definitions and setup for GPI0, interrupt and PWM */ 
void setup(){ 
	DDRB = 0xFF;		/* Make PORTB as output Port */ 
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<PB2); /* Make INT2 pin as Input */ 
  ac:	ba 98       	cbi	0x17, 2	; 23
	DDRB |= (1<<PB3); /* Make OC0 pin as Output */ 
  ae:	bb 9a       	sbi	0x17, 3	; 23
	GICR = (1<<INT2); /* Enable INT2*/ 
  b0:	80 e2       	ldi	r24, 0x20	; 32
  b2:	8b bf       	out	0x3b, r24	; 59
	MCUCSR = (1<<ISC2); /* Trigger INT2 on Rising Edge triggered */ 
  b4:	80 e4       	ldi	r24, 0x40	; 64
  b6:	84 bf       	out	0x34, r24	; 52
	sei(); /* Enable Global Interrupt */ 
  b8:	78 94       	sei
	ADC_Init(); /* Initialize ADC */ 
  ba:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_Init>
	TCNT0 = 0; /* Set timer0 count zero */ 
  be:	12 be       	out	0x32, r1	; 50
	TCCR0 = (1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00)|(1<<CS01);/* Set Fast PWM with Fosc/64 Timer0 clock */ 
  c0:	8b e6       	ldi	r24, 0x6B	; 107
  c2:	83 bf       	out	0x33, r24	; 51
  c4:	08 95       	ret

000000c6 <__vector_3>:
	}
	
/* Interrupt ISR function */ 
ISR(INT2_vect){ 
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	2f 93       	push	r18
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	Direction = ~Direction; /* Toggle Direction */
  d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  da:	80 95       	com	r24
  dc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  e0:	2f e7       	ldi	r18, 0x7F	; 127
  e2:	88 e3       	ldi	r24, 0x38	; 56
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <__vector_3+0x20>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <__vector_3+0x2a>
  f0:	00 00       	nop
	_delay_ms(50); /* Software de-bouncing control delay */ 
	} 
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	2f 91       	pop	r18
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <main>:
	

	
int main(void)
{
    setup(); 
 102:	0e 94 54 00 	call	0xa8	; 0xa8 <setup>
	while(1) 
	{
		 if (Direction !=0) /* Rotate DC motor Clockwise */ 
		 PORTB = 0x01; else /* Else rotate DC motor Anticlockwise */ 
		 PORTB = 0x02; 
 106:	d2 e0       	ldi	r29, 0x02	; 2
{
    setup(); 
	while(1) 
	{
		 if (Direction !=0) /* Rotate DC motor Clockwise */ 
		 PORTB = 0x01; else /* Else rotate DC motor Anticlockwise */ 
 108:	c1 e0       	ldi	r28, 0x01	; 1
int main(void)
{
    setup(); 
	while(1) 
	{
		 if (Direction !=0) /* Rotate DC motor Clockwise */ 
 10a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10e:	88 23       	and	r24, r24
 110:	11 f0       	breq	.+4      	; 0x116 <main+0x14>
		 PORTB = 0x01; else /* Else rotate DC motor Anticlockwise */ 
 112:	c8 bb       	out	0x18, r28	; 24
 114:	01 c0       	rjmp	.+2      	; 0x118 <main+0x16>
		 PORTB = 0x02; 
 116:	d8 bb       	out	0x18, r29	; 24
		 OCR0 = (ADC_Read(0)/4); /* Read ADC and map it into 0-255 to write in OCR0 register*/
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	0e 94 44 00 	call	0x88	; 0x88 <ADC_Read>
 11e:	99 23       	and	r25, r25
 120:	0c f4       	brge	.+2      	; 0x124 <main+0x22>
 122:	03 96       	adiw	r24, 0x03	; 3
 124:	95 95       	asr	r25
 126:	87 95       	ror	r24
 128:	95 95       	asr	r25
 12a:	87 95       	ror	r24
 12c:	8c bf       	out	0x3c, r24	; 60
	}
 12e:	ed cf       	rjmp	.-38     	; 0x10a <main+0x8>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
